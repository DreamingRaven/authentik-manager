# TODO example domain comply with RFC2606 https://www.rfc-editor.org/rfc/rfc2606
global:
  domain:
    # the base domain which should be used for authentication
    base: example.org
    # the domain where authentik ingress will listen
    full: auth.example.org
    # the domain where the ldap ingress will listen
    ldap: ldap.example.org
  admin:
    # the administrative user you want in ldap and the entire SSO
    # ATM does very little
    name: somebody
    email: somebody@example.org

# nameOverride: someNameForChart # set if you want to override the chart name for name generation
# instanceOverride: auth # set to override the instance label to associate to other apps like the operator

# this assumes external SMTP server that has username and password
# creds you can log in with.
# from=the user all emails are going to come from
# host=the location of SMTP server to authenticate to
# username=the user to authenticate to SMTP server with
smtp:
  # enable me to allow users to reset their own passwords etc
  # if diabled also disabled smtp password file env value
  enabled: false
  username: somebody@example.org
  port: 587
  host: smtp.gmail.com
  from: noreply@example.org

secret:
  generate: true
  randLength: 30
  # you probably dont want to change this name as you will have to change
  # it everywhere in subcharts
  name: auth

netpol:
  enabled: true

ingress:
  name: auth
  class: nginx
  enable: true
  clusterIssuer: letsencrypt-staging # must match cert-manager cluster issuer
  maxBodySize: 32M
  authCertSecret: authentik-cert
  ldapCertSecret: ldap-cert
  # HTTP STRICT TRANSPORT SECURITY
  # hsts:
  #   enable: false
  tls:
    enable: true

# postgresql DEPENDENCY CHART overrides
# https://github.com/bitnami/charts/tree/master/bitnami/postgresql/#parameters
postgresql:
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 16
  # nameOverride: pgsql
  fullnameOverride: postgres
  primary:
    persistence:
      enabled: false
  readReplicas:
    persistence:
      enabled: false
  postgresql:
    service:
      ports:
        postgresql: 5432
  auth:
    existingSecret: auth
    database: authentik
    username: authentik
    secretKeys:
      adminPasswordKey: postgresPassword
      userPasswordKey: postgresUserPassword
      replicationPasswordKey: postgresReplicationPassword
  # diagnosticMode:
  #   enabled: true
  #   command: ["sleep"]
  #   args: ["infinity"]

redis:
  fullnameOverride: redis
  image:
    registry: docker.io
    repository: bitnami/redis
    tag: "7.2"
  architecture: replication
  auth:
    enabled: true
    sentinel: false
    existingSecret: auth
    existingSecretPasswordKey: redisPassword
  replicaCount: 5
  master:
    service:
      ports:
        redis: 6379
    persistence:
      enabled: false
      size: 8Gi
  replica:
    persistence:
      enabled: false
      size: 8Gi

ldap:
  enabled: false
  image:
    registry: "docker.io"
    repository: "nitnelave/lldap"
    tag: "v0.5.0-alpine"
  persistence:
    enabled: false
    name: ldap-pvc
    accessMode: ReadWriteOnce
    size: 8Gi
    mountPath: /data
    # mountPath: /bitnami/openldap
  deployment:
    imagePullPolicy: Always
    name: ldap
    replicas: 1
    env: # statically defined environment variables can be as many as desired
    - name: LDAP_ADMIN_USERNAME
      value: "admin"
  secrets:
    secretName: auth
    basePath: /secrets
    lookup:
    - env: LLDAP_JWT_SECRET
      key: authJwtToken
    - env: LLDAP_LDAP_USER_PASS
      key: ldapAdminPassword
  service:
    name: ldap
  ports:
  - name: ldap
    containerPort: 3890
    servicePort: 3890
    protocol: TCP
  - name: http
    containerPort: 17170
    servicePort: 80
    protocol: TCP
  labels:
  - key: type
    value: auth
  - key: app
    value: ldap

authentik:
  enabled: true
  image:
    registry: "ghcr.io"
    repository: "goauthentik/server"
    tag: "2023.10.4"
  # domain: <BASE_DOMAIN>
  config:
    name: authentik-config
    path: /config
    file: configuration.yml
    noteFile: /notification.txt
    generate: true
  # authentik expects its secrets as files in the same directory
  # so we tell kube where to get secret data and where to put it
  secrets:
    basePath: /secrets
    lookup:
    # this lookup will mount a secret data to a file basePath/files
    # this will also then create an env variable pointing to this secret file
    # thus we have no env variables with secrets in them but files are permed
    # https://www.authentik.com/integration/kubernetes/secrets/
    - key: postgresUserPassword
      file: postgresql-pass
      env: AUTHENTIK_POSTGRESQL__PASSWORD
    - key: redisPassword
      file: redis-pass
      env: AUTHENTIK_REDIS__PASSWORD
    - key: authJwtToken
      file: secret-key
      env: AUTHENTIK_SECRET_KEY
    # - key: sessionSecret
    #   file: SESSION_SECRET
    #   env: AUTHENTIK_SESSION_SECRET_FILE
    # - key: postgresauthentikPassword
    #   file: STORAGE_PASSWORD
    #   env: AUTHENTIK_STORAGE_POSTGRES_PASSWORD_FILE
    # - key: authStorageEncryptionKey
    #   file: STORAGE_ENCRYPTION_KEY
    #   env: AUTHENTIK_STORAGE_ENCRYPTION_KEY_FILE
    # - key: ldapAdminPassword
    #   file: LDAP_PASSWORD
    #   env: AUTHENTIK_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE
    - key: smtpPassword
      file: smtp-pass
      env: AUTHENTIK_EMAIL__PASSWORD
  deployment:
    imagePullPolicy: Always
    name: authentik
    replicas: 3
    env: # statically defined environment variables can be as many as desired
    - name: AUTHENTIK_LISTERN__HTTP
      value: 0.0.0.0:9000
    - name: AUTHENTIK_LISTERN__HTTPS
      value: 0.0.0.0:9443
    - name: AUTHENTIK_LISTERN__LDAP
      value: 0.0.0.0:3389
    - name: AUTHENTIK_LISTERN__LDAPS
      value: 0.0.0.0:6636
    - name: AUTHENTIK_LISTERN__METRICS
      value: 0.0.0.0:9300
    - name: AUTHENTIK_LISTERN__DEBUG
      value: 0.0.0.0:9900
    - name: AUTHENTIK_LOG_LEVEL
      value: info
    - name: AUTHENTIK_DISABLE_UPDATE_CHECK
      value: false
    - name: AUTHENTIK_ERROR_REPORTING__ENABLED
      value: false
    - name: AUTHENTIK_AVATARS
      value: gravatar
    - name: AUTHENTIK_DEFAULT_USER_CHANGE_NAME
      value: true
    - name: AUTHENTIK_DEFAULT_USER_CHANGE_EMAIL
      value: true
    - name: AUTHENTIK_DEFAULT_USER_CHANGE_USERNAME
      value: true
    - name: AUTHENTIK_GDPR_COMPLIANCE
      value: true
    - name: AUTHENTIK_DEFAULT_TOKEN_LENGTH
      value: 60
    - name: AUTHENTIK_IMPERSONATION
      value: true
    # - name: AUTHENTIK_FOOTER_LINKS
    #   value: '[{"name": "Link Name","href":"https://goauthentik.io"}]'
    - name: AUTHENTIK_WEB__WORKERS
      value: 2
    - name: AUTHENTIK_WEB__THREADS
      value: 2
  service:
    name: authentik
  ports:
  - name: http
    containerPort: 9000
    servicePort: 80
    protocol: TCP
  - name: https
    containerPort: 9443
    servicePort: 443
    protocol: TCP
  - name: ldap
    containerPort: 3389
    servicePort: 389
    protocol: TCP
  - name: ldaps
    containerPort: 6636
    servicePort: 636
    protocol: TCP
  - name: metrics
    containerPort: 9300
    servicePort: 300
    protocol: TCP
  - name: debug
    containerPort: 9900
    servicePort: 900
    protocol: TCP
  labels:
  - key: type
    value: auth
  - key: app
    value: authentik
  # list blueprint configmap names in this namespace to automount to worker instances
  # https://goauthentik.io/developer-docs/blueprints/
  blueprints: []
  # - name: some-default-blueprint
  #   configMap:
  #     name: example-custom-blueprint-configmap
  #     key: my-default-blueprint
  #   dest: /blueprints/default/some-default-blueprint.yaml

# Authentik Manager
akm:
  operator:
    # you probably dont want AKM to be loaded by this chart but we leave this option here for you
    # you should probably load the operator seperately and without this chart installed so it can
    # manage everything
    enabled: false

# postgres admin dashboard
pgadmin:
  enabled: false
  image:
    registry: "docker.io"
    repository: "dpage/pgadmin4"
    tag: "7.8"
  persistence:
    enable: false
    name: pgadmin-pvc
    accessMode: ReadWriteOnce
    size: 4Gi
    mountPath: /var/lib/pgadmin/data
  deployment:
    imagePullPolicy: Always
    name: pgadmin
    replicas: 1
    env: # statically defined environment variables can be as many as desired
    - name: PGADMIN_LISTEN_PORT
      value: 80
    - name: PGADMIN_DEFAULT_EMAIL
      value: somebody@example.org
  config:
    name: pg-servers
  servers:
    # this key must be the file in the path
    key: servers.json
    path: /pgadmin4/servers.json
  secrets:
  - name: auth
    lookup:
    - key: pgAdminPassword
      env: PGADMIN_DEFAULT_PASSWORD
  service:
    name: pgadmin
  ports:
  - name: http-port
    containerPort: 80
    servicePort: 80
    protocol: TCP
  labels:
  - key: type
    value: auth
  - key: app
    value: pgadmin
  # OPTIONAL VOLUMES mount at /var/lib/pgadmin
