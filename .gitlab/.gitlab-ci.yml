stages:
  - lint
  - build
  - test
  - deploy

variables:
  CHANNEL: "stable"
  CHARTS_DIR: "charts"

  BUILDX_VERSION: "v0.7.1" # https://github.com/docker/buildx/releases
  BUILDX_ARCH: "linux-amd64" # I.E what architecture we are building FROM
  BUILDX_TARGET_ARCHES: "linux/amd64,linux/arm64/v8" # what architecture we are building FOR
  DOCKERFILE_PATH: "operator/Dockerfile" # relative path to dockerfile from project root directory
  DOCKERFILE_DIR: "operator" # relative path to dockerfile from project root directory
  CONTAINER_NAME: "copy-container"
  PAGES_DIR: "public"

# REUSABLE CONDITIONAL RULES FOR PIPELINE TRIGGERS
.rules_default_branch_push:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"

.rules_default_branch_tag:
  rules:
    - if: $CI_COMMIT_TAG

.rules_nondefault_branch_push:
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == "" && $CI_PIPELINE_SOURCE == "push"

# for every branch build container artifact for x86
docker_build_branch:
  stage: build
  image: docker:stable # an alpine image
  services:
    - docker:dind
  before_script:
    - docker info
  rules:
   - !reference [.rules_default_branch_push, rules]
   - !reference [.rules_nondefault_branch_push, rules]
  before_script:
    - apk add git make bash sed
    - sed --version
    - docker login registry.gitlab.com
      -u ${CI_REGISTRY_USER}
      -p ${CI_REGISTRY_PASSWORD}
    - wget -O /usr/bin/docker-buildx
      https://github.com/docker/buildx/releases/download/${BUILDX_VERSION}/buildx-${BUILDX_VERSION}.${BUILDX_ARCH}
    - chmod +x /usr/bin/docker-buildx
  script:
    - export SRC_VER="$(set -o pipefail && git describe --long 2>/dev/null | sed 's/\([^-]*-g\)/r\1/;s/-/./g' || printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)")"
    # - sed -e '1 s/\(^FROM\)/FROM --platform=\$$\{BUILDPLATFORM\}/; t' -e ' 1,// s//FROM --platform=\$$\{BUILDPLATFORM\}/' ${DOCKERFILE_PATH} > ${DOCKERFILE_PATH}.cross
    - echo "src_ver ${SRC_VER}"
    - make -C ${DOCKERFILE_DIR} docker-cross
    - cd ${DOCKERFILE_DIR}
    - docker-buildx create
      --use
    - docker-buildx build
      --platform "linux/amd64"
      --label "version=${SRC_VER}"
      --label "commit=$(git rev-parse HEAD)"
      --build-arg GIN_MODE="release"
      -t "$(echo ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_BRANCH} | tr "[:upper:]" "[:lower:]")"
      --push
      -f Dockerfile.cross .
  after_script:
    - docker logout ${CI_REGISTRY}
  tags:
    - docker

docker_build_multi_arch_tag:
  stage: build
  image: docker:stable # an alpine image
  services:
    - docker:dind
  before_script:
    - docker info
  # only:
  # - tags
  rules:
   - !reference [.rules_default_branch_tag, rules]
  before_script:
    - apk add git make bash sed
    - sed --version
    - docker login registry.gitlab.com
      -u ${CI_REGISTRY_USER}
      -p ${CI_REGISTRY_PASSWORD}
    - wget -O /usr/bin/docker-buildx
      https://github.com/docker/buildx/releases/download/${BUILDX_VERSION}/buildx-${BUILDX_VERSION}.${BUILDX_ARCH}
    - chmod +x /usr/bin/docker-buildx
  script:
    - export SRC_VER="$(set -o pipefail && git describe --long 2>/dev/null | sed 's/\([^-]*-g\)/r\1/;s/-/./g' || printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)")"
    - export SRC_VER_SHORT="$(git describe --abbrev=0)"
    # - sed -e '1 s/\(^FROM\)/FROM --platform=\$$\{BUILDPLATFORM\}/; t' -e ' 1,// s//FROM --platform=\$$\{BUILDPLATFORM\}/' ${DOCKERFILE_PATH} > ${DOCKERFILE_PATH}.cross
    - echo "src_ver_short ${SRC_VER_SHORT}\nsrc_ver ${SRC_VER}"
    - make -C ${DOCKERFILE_DIR} docker-cross
    - cd ${DOCKERFILE_DIR}
    - docker-buildx create
      --use
    - docker-buildx build
      --platform ${BUILDX_TARGET_ARCHES}
      --label "version=${SRC_VER}"
      --label "commit=$(git rev-parse HEAD)"
      --build-arg GIN_MODE="release"
      -t "$(echo ${CI_REGISTRY}/${CI_PROJECT_PATH}:${SRC_VER_SHORT} | tr "[:upper:]" "[:lower:]")"
      -t "$(echo ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest | tr "[:upper:]" "[:lower:]")"
      --push
      -f Dockerfile.cross .
  after_script:
    - docker logout ${CI_REGISTRY}
  tags:
    - docker

helm-chart-lint:
  stage: lint
  image:
    name: alpine/helm:latest
    entrypoint: ["/bin/sh", "-c"]
  script:
    - |
      for dir in ${CHARTS_DIR}/*/
      do
        dir=${dir%*/} # removes trailing "/"
        echo "linting ${dir} chart"
        helm lint "${dir}"/
      done

helm-chart-build:
  stage: build
  image:
    name: alpine/helm:latest
    entrypoint: ["/bin/sh", "-c"]
  script:
  - apk add --no-cache grep
  - helm plugin install https://github.com/chartmuseum/helm-push.git
  # - export SRC_VER="$(set -o pipefail && git describe --long 2>/dev/null | sed 's/\([^-]*-g\)/r\1/;s/-/./g' || printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)")"
  - export SRC_VER="$(cat ${CHARTS_DIR}/ak/values.yaml | grep -P -o '(?<=ghcr.io/goauthentik/server:).*(?=\")')"
  # gitlab trunicates to last 20 commits so if tag was older things will start breaking
  - git fetch --unshallow
  - git fetch --tags
  - export HELM_VER="$(git describe --abbrev=0)" # helm does not like --long git tags
  - echo "src version ${SRC_VER}"
  - echo "helm version ${HELM_VER}"
  - mkdir -p ./package
  - |
    for dir in ${CHARTS_DIR}/*/
    do
      dir=${dir%*/} # removes trailing "/"
      helm dependency build "${dir}"/
      helm package "${dir}"/ --destination ./package --app-version ${SRC_VER} --version ${HELM_VER}
    done
  artifacts:
    paths:
    - package/

# https://docs.gitlab.com/ee/user/packages/helm_repository/index.html#use-cicd-to-publish-a-helm-package
helm-chart-push:
  stage: deploy
  only:
  - tags
  image:
    name: curlimages/curl:latest
    entrypoint: ["/bin/sh", "-c"]
  script:
  - cd package
  # - export PACKAGE_FILE="$(ls)"
  - export HELM_PACKAGE_REGISTRY="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/${CHANNEL}/charts"
  - |
    for file in *
    do
      echo "exporting ${file}"
      curl --request POST --fail-with-body --user gitlab-ci-token:${CI_JOB_TOKEN} --form "chart=@${file}" "${HELM_PACKAGE_REGISTRY}"
    done
  - echo "published to ${HELM_PACKAGE_REGISTRY}"

pages:
  stage: deploy
  image: docker:stable
  services:
    - docker:dind
  rules:
   - !reference [.rules_default_branch_tag, rules]
  before_script:
    - docker login registry.gitlab.com
      -u ${CI_REGISTRY_USER}
      -p ${CI_REGISTRY_PASSWORD}
  script:
    - export DOCKER_TAG="$(echo ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest | tr "[:upper:]" "[:lower:]")"
    - docker build -t ${CONTAINER_NAME} -f Dockerfile .
    - docker run --name ${CONTAINER_NAME} -d --entrypoint sleep ${CONTAINER_NAME} 20
    - docker cp ${CONTAINER_NAME}:/app/static ${PAGES_DIR}
    - docker rm -f ${CONTAINER_NAME} || echo "all good"
    # display URL of pages
    - echo "${CI_PAGES_URL}"
  after_script:
    - docker logout ${CI_REGISTRY}
  artifacts:
    paths:
      - public
